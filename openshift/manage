#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of project environment.

  Usage:
    $0 [options] [commands]

  Commands:
  ========
    configureProof <baseUrl> <payLoadPath> [namespace] [secretName] [key]
      - Post a proof configuration to a vc-authn-oidc controller.
      - To update, PUT, use the '-u' (update) option; see examples below.

        Examples;
          $0 -p default -e dev configureProof https://a2a-vc-authn-controller-dev.pathfinder.gov.bc.ca ../proof-configurations/accredited-lawyer/dev/accredited-lawyer.json
          $0 -p default -e dev -u configureProof https://a2a-vc-authn-controller-dev.pathfinder.gov.bc.ca ../proof-configurations/accredited-lawyer/dev/accredited-lawyer.json

    accepttaa <baseUrl> <secretName> [key] [namespace]
      - Retrieve the current TAA from the ledger, and submit a TAA accept transaction.

        Examples;
          $0 -p a2a -e dev accepttaa https://a2a-vc-authn-controller-dev.pathfinder.gov.bc.ca

    registersovrin <did> <verkey> [ledger]
      - Register the did/verkey combination on the taget ledger as ENDORSER.

        Examples;
          $0 -p default -e dev registersovrin mydid

    addAuthClient <clientName> <clientRedirectUri> [clientCorsOrigin]
      - Adds a new client to the vc-authn database.

        Examples;
          $0 -p default -e dev addauthclient mynewclient https:///my.newclient.example
          $0 -p default -e dev addauthclient mynewclient https:///my.newclient.example https:///my.newclient.weburl

    updateAuthClient <clientName> <clientRedirectUri> [clientCorsOrigin]
      - Updates the client with the given name in the the vc-authn database.

        Examples;
          $0 -p default -e dev updateAuthClient myclient https:///my.client.example
          $0 -p default -e dev updateAuthClient myclient https:///my.client.example https:///my.client.weburl

    getAuthClient [clientName]
      - Gets the configuration for the client with the given name, or all clients, in the the vc-authn database.

        Examples;
          $0 -p default -e dev getAuthClient
          $0 -p default -e dev getAuthClient myclient

    clean
      - Remove the application components from a given environment.
        Specify the environment using the -e option.

    delete
      - Delete allapplication components from a given environment.
        Specify the environment using the -e option.

    scaleUp
      - Scale up one or more pods.
        Example;
          $0 -p medlab -e prod scaleUp agent-a2a api-a2a issuer-web-a2a

    scaleDown
      - Scale down one or more pods.
        Example;
          $0 -p medlab -e prod scaleDown agent-a2a api-a2a issuer-web-a2a

    recycle
      - Recycle one or more pods.
        Example;
          $0 -p medlab -e prod recycle agent-a2a api-a2a issuer-web-a2a
EOF
}

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :s: FLAG; then
    case ${FLAG} in
      # List of local options:
      s ) resourceSuffix=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
deleteResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    printAndAskToContinue "If you contiune all of the resources for '${_appName}' will be deleted.  All data will be lost."
    oc -n $(getProjectName) delete all,secret,pvc,configmap,NetworkSecurityPolicy -l app-group=${_appName}
  )
}

cleanResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    echoWarning "Cleaning out resources for '${_appName}'.  Secrets and PVCs will be retained."
    oc -n $(getProjectName) delete all,configmap,NetworkSecurityPolicy -l app-group=${_appName}
  )
}

configureProof() {
  baseUrl=${1}
  payLoadPath=${2}
  namespace=${3}
  secretName=${4}
  key=${5}
  if [ -z "${baseUrl}" ] || [ -z "${payLoadPath}" ]|| [ -z "${namespace}" ]|| [ -z "${secretName}" ]|| [ -z "${key}" ]; then
    echoError "\nconfigureProof; You MUST specify the following parameters:\n- baseUrl\n- payLoadPath\n- namespace\n- secretName\n- key"
    exit 1
  fi

  apiKey=$(getSecret "${secretName}" "${key}" "${namespace}")
  if [ -z "${apiKey}" ]; then
    echoError "\nconfigureProof; Unable to process request:\n - Unable to locate the API Key for ${baseUrl}.\n   Please ensure you are logged into OpenShift and have access to the following resources.\n   - Namespace: ${namespace}\n   - Secret Name: ${secretName}\n   - Key: ${key}"
    exit 1
  fi

  if createOperation; then
    httpCommand="POST"
  else
    httpCommand="PUT"
  fi

  if [ ${payLoadPath} == "all" ]; then
    searchPath="../proof-configurations"
    searchFilter="*.json"
    payLoadPaths=$(find ${searchPath} -type f -name "${searchFilter}")
  else
    payLoadPaths=${payLoadPath}
  fi

  for payLoadPath in ${payLoadPaths}; do
    echo -e "\n${httpCommand}ing '${payLoadPath}' to ${baseUrl} ...\n"
    curl \
      -X ${httpCommand} \
      -H X-Api-Key:${apiKey} \
      -H accept:application/json \
      -H Content-Type:application/json-patch+json \
      --data @${payLoadPath} \
      ${baseUrl}/api/vc-configs
  done
}

accepttaa() {
  baseUrl=${1}
  namespace=${2}
  secretName="${3}"
  key=${4}
  if [ -z "${baseUrl}" ] || [ -z "${namespace}" ]|| [ -z "${secretName}" ]|| [ -z "${key}" ]; then
    echoError "\naccepttaa; You MUST specify the following parameters:\n- baseUrl\n- secretName\n- key\n- namespace"
    exit 1
  fi
  
  apiKey=$(getSecret "${secretName}" "${key}" "${namespace}")
  if [ -z "${apiKey}" ]; then
    echoError "\accepttaa; Unable to process request:\n - Unable to locate the API Key for ${baseUrl}.\n   Please ensure you are logged into OpenShift and have access to the following resources.\n   - Namespace: ${namespace}\n   - Secret Name: ${secretName}\n   - Key: ${key}"
    exit 1
  fi

  # fetch current TAA
  echo -e "\nFetching TAA...\n"
  TAA=$(curl \
      -X GET \
      -H X-Api-Key:${apiKey} \
      ${baseUrl}/ledger/taa )
  
  TAA_TEXT=$(jq -nr "${TAA} | .result.taa_record.text")
  TAA_TEXT=$(echo "${TAA_TEXT}" | iconv -t utf-8 | sed 's/"/\\\"/g')
  TAA_VERSION=$(jq -nr "${TAA} | .result.taa_record.version")
  
  TAA_METHODS_KEYS=$(jq -nr "${TAA} | .result.aml_record.aml | keys | .[]")
  TAA_METHODS_KEYS=$(echo "${TAA_METHODS_KEYS}" | sed 's/$/~/')
  TAA_METHODS_KEYS=${TAA_METHODS_KEYS//$'\n'/}
  TAA_METHODS_VALUES=$(jq -nr "${TAA} | .result.aml_record.aml | .[]")
  TAA_METHODS_VALUES=$(echo "${TAA_METHODS_VALUES}" | sed 's/$/~/')
  TAA_METHODS_VALUES=${TAA_METHODS_VALUES//$'\n'/}

  IFS='~'
  read -r -a TAA_METHODS_KEYS <<< "$TAA_METHODS_KEYS"
  read -r -a TAA_METHODS_VALUES <<< "$TAA_METHODS_VALUES"
  unset IFS

  # prompt user for TAA signing method
  unset SELECTED_MECHANISM
  PS3="Select TAA signing method:"
  select opt in "${TAA_METHODS_VALUES[@]}"; do
    SELECTED_MECHANISM=${TAA_METHODS_KEYS[$REPLY]}
    break
  done
  
  echo -e "\nSigning TAA using method ${SELECTED_MECHANISM}...\n"
  echo "{\"mechanism\":\"${SELECTED_MECHANISM}\", \"version\": \"${TAA_VERSION}\", \"text\":\"${TAA_TEXT}\"}" > taa_payload.json
  TAA_RESULT=$(curl \
      -X POST \
      -H X-Api-Key:${apiKey} \
      -H "Content-Type: application/json charset=utf-8" \
      -d @taa_payload.json \
      ${baseUrl}/ledger/taa/accept )  
  rm -f ./taa_payload.json
}

registersovrin() {
  did=${1}
  verkey=${2}
  ledger=${3}
  key=${4}
  if [ -z "${did}" ] || [ -z "${verkey}" ]|| [ -z "${ledger}" ]; then
    echoError "\naccepttaa; You MUST specify the following parameters:\n- did\n- verkey\n- ledger"
    exit 1
  fi
    
  echo -e "\nRegistering on ${ledger}...\n"
  RESULT=$(curl \
      -X POST \
      -H "Content-Type: application/json charset=utf-8" \
      -d "{\"network\":\"${ledger}\",\"did\":\"${did}\",\"verkey\":\"${verkey}\",\"paymentaddr\":\"\"}" \
      https://selfserve.sovrin.org/nym )
}

addAuthClient() {
  _clientName=${1}
  _clientRedirectUri=${2}
  _clientCorsOrigin=${3}
  _podName=${4:-vc-authn-database}

  re="[[:space:]]+"
  if [ -z "${_clientName}" ] || [ -z "${_clientName}" ] || [ -z "${_clientRedirectUri}" ]; then
    echo -e \\n"addAuthClient; One or more paramaters are invalid. Required parameters are clientName, clientRedirectUri."\\n
    exit 1
  fi

  if [[ $_clientName =~ $re ]]; then
    echo -e \\n"addAuthClient; The client name cannot include spaces."\\n
    exit 1
  fi 

  if [ -z "${_clientCorsOrigin}" ]; then
    echoWarning "*** You have not specified a CORS origin for this client ***"
    printAndAskToContinue "If this is correct, press any key to proceed. Otherwise press Ctrl+C to start over..."
  fi

  # Add new client
  echo -e "Creating client '${_clientName}'..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"Clients\" (\"ClientId\", \"ClientName\", \"Created\", \"Enabled\",\"ProtocolType\",\"RequireClientSecret\",\"Description\",\"ClientUri\",\"LogoUri\",\"RequireConsent\",\"AllowRememberConsent\",\"AlwaysIncludeUserClaimsInIdToken\",\"RequirePkce\",\"AllowPlainTextPkce\",\"AllowAccessTokensViaBrowser\",\"FrontChannelLogoutUri\",\"FrontChannelLogoutSessionRequired\",\"BackChannelLogoutUri\",\"BackChannelLogoutSessionRequired\",\"AllowOfflineAccess\",\"IdentityTokenLifetime\",\"AccessTokenLifetime\",\"AuthorizationCodeLifetime\",\"ConsentLifetime\",\"AbsoluteRefreshTokenLifetime\",\"SlidingRefreshTokenLifetime\",\"RefreshTokenUsage\",\"UpdateAccessTokenClaimsOnRefresh\",\"RefreshTokenExpiration\",\"AccessTokenType\",\"EnableLocalLogin\",\"IncludeJwtId\",\"AlwaysSendClientClaims\",\"ClientClaimsPrefix\",\"PairWiseSubjectSalt\",\"Updated\",\"LastAccessed\",\"UserSsoLifetime\",\"UserCodeType\",\"DeviceCodeLifetime\",\"NonEditable\",\"AllowedIdentityTokenSigningAlgorithms\",\"RequireRequestObject\") VALUES ('\''${_clientName}'\'', '\''${_clientName}'\'',CURRENT_DATE,true,'\''oidc'\'',false,NULL,NULL,NULL,false,true,false,true,false,false,NULL,true,NULL,true,false,300,3600,300,NULL,2592000,1296000,1,false,1,0,true,true,false,'\''client_'\'',NULL,NULL,NULL,NULL,NULL,300,false,NULL,false);'"

  # Retrieve new client id
  _clientId=$(runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -tAc 'select \"Id\" from \"Clients\" where \"ClientName\" = '\''${_clientName}'\'';'")

  echo -e "Client ${_clientName} has Id=${_clientId}"

  # Add client scopes
  echo -e "Creating client scopes..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientScopes\" (\"Scope\", \"ClientId\") select \"Scope\", ${_clientId} as \"ClientId\" from \"ClientScopes\" where \"ClientId\" = 1;'"

  # Add client grant types
  echo -e "Creating grant types..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientGrantTypes\" (\"GrantType\", \"ClientId\") select \"GrantType\", ${_clientId} as \"ClientId\" from \"ClientGrantTypes\" where \"ClientId\" = 1;'"

  # Add client redirect URI  
  echo -e "Adding ${_clientRedirectUri} as redirect URI..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientRedirectUris\" (\"RedirectUri\", \"ClientId\") values ('\''${_clientRedirectUri}'\'', ${_clientId});'"

  if [ ! -z "${_clientCorsOrigin}" ]; then
    echo -e "Adding ${_clientCorsOrigin} as CORS origin..."
    # Add client CORS origin
    runInContainer \
      ${_podName} \
      "psql -d \${POSTGRESQL_DATABASE} -ac 'insert into \"ClientCorsOrigins\" (\"Origin\", \"ClientId\") values ('\''${_clientCorsOrigin}'\'', ${_clientId});'"
  else
    echoWarning "No CORS origin specified, skipping..."
  fi

  echo -e "New client created successfully!"
}

updateAuthClient() {
  _clientName=${1}
  _clientRedirectUri=${2}
  _clientCorsOrigin=${3}
  _podName=${4:-vc-authn-database}

  re="[[:space:]]+"
  if [ -z "${_clientName}" ] || [ -z "${_clientName}" ] || [ -z "${_clientRedirectUri}" ]; then
    echo -e \\n"addAuthClient; One or more paramaters are invalid. Required parameters are clientName, clientRedirectUri."\\n
    exit 1
  fi

  if [[ $_clientName =~ $re ]]; then
    echo -e \\n"addAuthClient; The client name cannot include spaces."\\n
    exit 1
  fi 

  if [ -z "${_clientCorsOrigin}" ]; then
    echoWarning "*** No CORS origin was specified for the client, any existing value will not be updated ***"
  fi

  # Retrieve new client id
  _clientId=$(runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -tAc 'select \"Id\" from \"Clients\" where \"ClientName\" = '\''${_clientName}'\'';'")

  echo -e "Client ${_clientName} has Id=${_clientId}"

  # Update client redirect URI
  echo -e "Updating client redirect URI..."
  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac 'update \"ClientRedirectUris\" set \"RedirectUri\" = '\''${_clientRedirectUri}'\'' where \"ClientId\" = ${_clientId};'"

  if [ ! -z "${_clientCorsOrigin}" ]; then
    # Update client CORS origin
    echo -e "Update client CORS origin..."
    runInContainer \
      ${_podName} \
      "psql -d \${POSTGRESQL_DATABASE} -ac 'update \"ClientCorsOrigins\" set \"Origin\" = '\''${_clientCorsOrigin}'\'' where \"ClientId\" = ${_clientId};'"
  fi

  echo -e "Client updated sucessfully!"
}

getAuthClient() {
  _clientName=${1}
  _podName=${2:-vc-authn-database}

  selectStmt="select c.\"ClientName\", r.\"RedirectUri\", o.\"Origin\" from \"Clients\" c join \"ClientRedirectUris\" r on c.\"Id\"=r.\"ClientId\" left join \"ClientCorsOrigins\" o on c.\"Id\"=o.\"ClientId\""
  
  if [ ! -z ${_clientName} ]; then
    selectStmt=$(echo ${selectStmt} "where c.\"ClientName\" = '\''${_clientName}'\''")
  else
    selectStmt=$(echo $selectStmt)
  fi

  runInContainer \
    ${_podName} \
    "psql -d \${POSTGRESQL_DATABASE} -ac '${selectStmt}'"
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  clean)
    appName=${1:-${PROFILE}}
    cleanResources ${appName}
    ;;

  delete)
    appName=${1:-${PROFILE}}
    deleteResources ${appName}
    ;;

  configureproof)
    baseUrl=${1}
    payLoadPath=${2}
    namespace=${3:-$(getProjectName)}
    secretName=${4:-vc-authn-controller}
    key=${5:-controller-api-key}
    configureProof ${baseUrl} ${payLoadPath} ${namespace} ${secretName} ${key}
    ;;

  accepttaa)
    baseUrl=${1}
    secretName=${2:-"agent-${PROFILE}"}
    key=${3:-admin-api-key}
    namespace=${4:-$(getProjectName)}
    accepttaa ${baseUrl} ${namespace} ${secretName} ${key}
    ;;
  
  registersovrin)
    did=${1}
    verkey=${2}
    ledger=${3:-stagingnet}
    registersovrin ${did} ${verkey} ${ledger}
    ;;
  
  addauthclient)
    clientName=${1}
    clientRedirectUri=${2}
    clientCorsOrigin=${3}
    podName=${4}
    addAuthClient ${clientName} ${clientRedirectUri} ${clientCorsOrigin} ${podName}
    ;;
  
  updateauthclient)
    clientName=${1}
    clientRedirectUri=${2}
    clientCorsOrigin=${3}
    podName=${4}
    updateAuthClient ${clientName} ${clientRedirectUri} ${clientCorsOrigin} ${podName}
    ;;
  
  getauthclient)
    clientName=${1}
    podName=${2}
    getAuthClient ${clientName} ${clientRedirectUri} ${clientCorsOrigin} ${podName}
    ;;

  scaleup)
    scaleUp -w $${@}
    ;;
  scaledown)
    scaleDown -w ${@}
    ;;
  recycle)
    recyclePods -w ${@}
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null